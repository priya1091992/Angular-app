System.register(['angular2/core', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', 'angular2/src/facade/lang', './async', './async_test_completer'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var core_1, exceptions_1, collection_1, lang_1, async_1, async_test_completer_1;
    var TestInjector, _testInjector, InjectSetupWrapper;
    function getTestInjector() {
        if (_testInjector == null) {
            _testInjector = new TestInjector();
        }
        return _testInjector;
    }
    exports_1("getTestInjector", getTestInjector);
    /**
     * Set the providers that the test injector should use. These should be providers
     * common to every test in the suite.
     *
     * This may only be called once, to set up the common providers for the current test
     * suite on teh current platform. If you absolutely need to change the providers,
     * first use `resetBaseTestProviders`.
     *
     * Test Providers for individual platforms are available from
     * 'angular2/platform/testing/<platform_name>'.
     */
    function setBaseTestProviders(platformProviders, applicationProviders) {
        var testInjector = getTestInjector();
        if (testInjector.platformProviders.length > 0 || testInjector.applicationProviders.length > 0) {
            throw new exceptions_1.BaseException('Cannot set base providers because it has already been called');
        }
        testInjector.platformProviders = platformProviders;
        testInjector.applicationProviders = applicationProviders;
        var injector = testInjector.createInjector();
        var inits = injector.get(core_1.PLATFORM_INITIALIZER, null);
        if (lang_1.isPresent(inits)) {
            inits.forEach(function (init) { return init(); });
        }
        testInjector.reset();
    }
    exports_1("setBaseTestProviders", setBaseTestProviders);
    /**
     * Reset the providers for the test injector.
     */
    function resetBaseTestProviders() {
        var testInjector = getTestInjector();
        testInjector.platformProviders = [];
        testInjector.applicationProviders = [];
        testInjector.reset();
    }
    exports_1("resetBaseTestProviders", resetBaseTestProviders);
    /**
     * Allows injecting dependencies in `beforeEach()` and `it()`.
     *
     * Example:
     *
     * ```
     * beforeEach(inject([Dependency, AClass], (dep, object) => {
     *   // some code that uses `dep` and `object`
     *   // ...
     * }));
     *
     * it('...', inject([AClass], (object) => {
     *   object.doSomething();
     *   expect(...);
     * })
     * ```
     *
     * Notes:
     * - inject is currently a function because of some Traceur limitation the syntax should
     * eventually
     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`
     *
     * @param {Array} tokens
     * @param {Function} fn
     * @return {Function}
     */
    function inject(tokens, fn) {
        var testInjector = getTestInjector();
        if (tokens.indexOf(async_test_completer_1.AsyncTestCompleter) >= 0) {
            // Return an async test method that returns a Promise if AsyncTestCompleter is one of the
            // injected tokens.
            return function () {
                var completer = testInjector.get(async_test_completer_1.AsyncTestCompleter);
                testInjector.execute(tokens, fn);
                return completer.promise;
            };
        }
        else {
            // Return a synchronous test method with the injected tokens.
            return function () { return getTestInjector().execute(tokens, fn); };
        }
    }
    exports_1("inject", inject);
    function withProviders(providers) {
        return new InjectSetupWrapper(providers);
    }
    exports_1("withProviders", withProviders);
    /**
     * @Deprecated {use async(inject())}
     *
     * Allows injecting dependencies in `beforeEach()` and `it()`. The test must return
     * a promise which will resolve when all asynchronous activity is complete.
     *
     * Example:
     *
     * ```
     * it('...', injectAsync([AClass], (object) => {
     *   return object.doSomething().then(() => {
     *     expect(...);
     *   });
     * })
     * ```
     *
     * @param {Array} tokens
     * @param {Function} fn
     * @return {Function}
     */
    function injectAsync(tokens, fn) {
        return async_1.async(inject(tokens, fn));
    }
    exports_1("injectAsync", injectAsync);
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (async_1_1) {
                async_1 = async_1_1;
                exports_1({
                    "async": async_1_1["async"]
                });
            },
            function (async_test_completer_1_1) {
                async_test_completer_1 = async_test_completer_1_1;
            }],
        execute: function() {
            TestInjector = (function () {
                function TestInjector() {
                    this._instantiated = false;
                    this._injector = null;
                    this._providers = [];
                    this.platformProviders = [];
                    this.applicationProviders = [];
                }
                TestInjector.prototype.reset = function () {
                    this._injector = null;
                    this._providers = [];
                    this._instantiated = false;
                };
                TestInjector.prototype.addProviders = function (providers) {
                    if (this._instantiated) {
                        throw new exceptions_1.BaseException('Cannot add providers after test injector is instantiated');
                    }
                    this._providers = collection_1.ListWrapper.concat(this._providers, providers);
                };
                TestInjector.prototype.createInjector = function () {
                    var rootInjector = core_1.ReflectiveInjector.resolveAndCreate(this.platformProviders);
                    this._injector = rootInjector.resolveAndCreateChild(collection_1.ListWrapper.concat(this.applicationProviders, this._providers));
                    this._instantiated = true;
                    return this._injector;
                };
                TestInjector.prototype.get = function (token) {
                    if (!this._instantiated) {
                        this.createInjector();
                    }
                    return this._injector.get(token);
                };
                TestInjector.prototype.execute = function (tokens, fn) {
                    var _this = this;
                    if (!this._instantiated) {
                        this.createInjector();
                    }
                    var params = tokens.map(function (t) { return _this._injector.get(t); });
                    return lang_1.FunctionWrapper.apply(fn, params);
                };
                return TestInjector;
            }());
            exports_1("TestInjector", TestInjector);
            _testInjector = null;
            InjectSetupWrapper = (function () {
                function InjectSetupWrapper(_providers) {
                    this._providers = _providers;
                }
                InjectSetupWrapper.prototype._addProviders = function () {
                    var additionalProviders = this._providers();
                    if (additionalProviders.length > 0) {
                        getTestInjector().addProviders(additionalProviders);
                    }
                };
                InjectSetupWrapper.prototype.inject = function (tokens, fn) {
                    var _this = this;
                    return function () {
                        _this._addProviders();
                        return inject(tokens, fn)();
                    };
                };
                /** @Deprecated {use async(withProviders().inject())} */
                InjectSetupWrapper.prototype.injectAsync = function (tokens, fn) {
                    var _this = this;
                    return function () {
                        _this._addProviders();
                        return injectAsync(tokens, fn)();
                    };
                };
                return InjectSetupWrapper;
            }());
            exports_1("InjectSetupWrapper", InjectSetupWrapper);
        }
    }
});
//# sourceMappingURL=test_injector.js.map