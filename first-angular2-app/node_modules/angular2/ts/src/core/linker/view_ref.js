System.register(['angular2/src/facade/exceptions', '../change_detection/change_detector_ref', 'angular2/src/core/change_detection/constants'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var exceptions_1, change_detector_ref_1, constants_1;
    var ViewRef, EmbeddedViewRef, ViewRef_;
    return {
        setters:[
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (change_detector_ref_1_1) {
                change_detector_ref_1 = change_detector_ref_1_1;
            },
            function (constants_1_1) {
                constants_1 = constants_1_1;
            }],
        execute: function() {
            ViewRef = (function (_super) {
                __extends(ViewRef, _super);
                function ViewRef() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(ViewRef.prototype, "changeDetectorRef", {
                    /**
                     * @internal
                     */
                    get: function () { return exceptions_1.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                Object.defineProperty(ViewRef.prototype, "destroyed", {
                    get: function () { return exceptions_1.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                return ViewRef;
            }(change_detector_ref_1.ChangeDetectorRef));
            exports_1("ViewRef", ViewRef);
            /**
             * Represents an Angular View.
             *
             * <!-- TODO: move the next two paragraphs to the dev guide -->
             * A View is a fundamental building block of the application UI. It is the smallest grouping of
             * Elements which are created and destroyed together.
             *
             * Properties of elements in a View can change, but the structure (number and order) of elements in
             * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
             * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
             * <!-- /TODO -->
             *
             * ### Example
             *
             * Given this template...
             *
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <li *ngFor="let  item of items">{{item}}</li>
             * </ul>
             * ```
             *
             * ... we have two {@link ProtoViewRef}s:
             *
             * Outer {@link ProtoViewRef}:
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <template ngFor let-item [ngForOf]="items"></template>
             * </ul>
             * ```
             *
             * Inner {@link ProtoViewRef}:
             * ```
             *   <li>{{item}}</li>
             * ```
             *
             * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
             *
             * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
             *
             * ```
             * <!-- ViewRef: outer-0 -->
             * Count: 2
             * <ul>
             *   <template view-container-ref></template>
             *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
             *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
             * </ul>
             * <!-- /ViewRef: outer-0 -->
             * ```
             */
            EmbeddedViewRef = (function (_super) {
                __extends(EmbeddedViewRef, _super);
                function EmbeddedViewRef() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
                    get: function () { return exceptions_1.unimplemented(); },
                    enumerable: true,
                    configurable: true
                });
                ;
                return EmbeddedViewRef;
            }(ViewRef));
            exports_1("EmbeddedViewRef", EmbeddedViewRef);
            ViewRef_ = (function () {
                function ViewRef_(_view) {
                    this._view = _view;
                    this._view = _view;
                }
                Object.defineProperty(ViewRef_.prototype, "internalView", {
                    get: function () { return this._view; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewRef_.prototype, "changeDetectorRef", {
                    /**
                     * Return `ChangeDetectorRef`
                     */
                    get: function () { return this; },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ViewRef_.prototype, "rootNodes", {
                    get: function () { return this._view.flatRootNodes; },
                    enumerable: true,
                    configurable: true
                });
                ViewRef_.prototype.setLocal = function (variableName, value) { this._view.setLocal(variableName, value); };
                ViewRef_.prototype.hasLocal = function (variableName) { return this._view.hasLocal(variableName); };
                Object.defineProperty(ViewRef_.prototype, "destroyed", {
                    get: function () { return this._view.destroyed; },
                    enumerable: true,
                    configurable: true
                });
                ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
                ViewRef_.prototype.detach = function () { this._view.cdMode = constants_1.ChangeDetectionStrategy.Detached; };
                ViewRef_.prototype.detectChanges = function () { this._view.detectChanges(false); };
                ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
                ViewRef_.prototype.reattach = function () {
                    this._view.cdMode = constants_1.ChangeDetectionStrategy.CheckAlways;
                    this.markForCheck();
                };
                ViewRef_.prototype.onDestroy = function (callback) { this._view.disposables.push(callback); };
                ViewRef_.prototype.destroy = function () { this._view.destroy(); };
                return ViewRef_;
            }());
            exports_1("ViewRef_", ViewRef_);
        }
    }
});
//# sourceMappingURL=view_ref.js.map